/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-21T13:09:59.263Z[GMT]")
@Api(value = "transaction", description = "the transaction API")
public interface TransactionApi {

    @ApiOperation(value = "Adds a transaction with form data", nickname = "addTransaction", notes = "Adds a transaction to the system", tags={ "transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "item created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @RequestMapping(value = "/transaction",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addTransaction(@ApiParam(value = "Transaction object that needs to be added to the store" ,required=true )  @Valid @RequestBody Transaction body
);


    @ApiOperation(value = "Get all the transactions", nickname = "getAllTransactions", notes = "Returns all transactions", response = Transaction.class, responseContainer = "List", tags={ "transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Transaction.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/transaction",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getAllTransactions();


    @ApiOperation(value = "Get a transactions by ID", nickname = "getTransactionById", notes = "Returns a single transaction", response = Transaction.class, responseContainer = "List", tags={ "transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Transaction.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad input parameter"),
        @ApiResponse(code = 404, message = "Transaction not found") })
    @RequestMapping(value = "/transaction/{transactionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Transaction> getTransactionById(@ApiParam(value = "ID of transaction to return",required=true) @PathVariable("transactionId") Long transactionId
);


    @ApiOperation(value = "Get transactions from an user", nickname = "getTransactionFromUser", notes = "Returns transaction from a specific user", response = Transaction.class, responseContainer = "List", tags={ "transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Transaction.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad input parameter"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/transaction/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransactionFromUser(@ApiParam(value = "ID of an user",required=true) @PathVariable("userId") Long userId
);

    @ApiOperation(value = "Get transactions from an account", nickname = "getTransactionFromAccount", notes = "Returns transaction from a specific account", response = Transaction.class, responseContainer = "List", tags={ "transactions", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "search results matching criteria", response = Transaction.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Bad input parameter"),
            @ApiResponse(code = 404, message = "Account not found") })
    @RequestMapping(value = "/transaction/account/{accountId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransactionFromAcount(@ApiParam(value = "ID of an acount",required=true) @PathVariable("acountId") String acountId
    );

}
